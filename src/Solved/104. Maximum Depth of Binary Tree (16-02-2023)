class Solution {

    /* Recursion
    public int maxDepth(TreeNode root) {

        if(root == null)
            return 0;

        int depth = 1;

        depth += Math.max( maxDepth(root.left) ,maxDepth(root.right) );

        return depth;
    } */


    /* Iteration
    public int maxDepth(TreeNode root) {

        int maxDepth = 0;

        Stack<TreeNode> nodes = new Stack<TreeNode>();
        Stack<Integer> depths = new Stack<Integer>();

        nodes.add(root);
        depths.add(0);
        while(!nodes.isEmpty()) {

            TreeNode curr = nodes.pop();
            int currDepth = depths.pop() + 1;

            maxDepth = Math.max(currDepth,maxDepth);

            if(curr.left != null) {
                nodes.add(curr.left);
                depths.add(currDepth);
            }

            if(curr.right != null) {
                nodes.add(curr.right);
                depths.add(currDepth);
            }

        }

        return maxDepth;


    } */
}

